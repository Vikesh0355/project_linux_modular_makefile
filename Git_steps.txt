1. Generate SSH Key (if not done already)
    ssh-keygen -t ed25519 -C "your_email@example.com"
    # Save key with a meaningful name, e.g., key_Git.txt
    # Add passphrase (optional)

2. Add SSH key to GitHub

    Copy public key content:

    cat ~/key_Git.txt.pub

    Paste it into GitHub Settings > SSH and GPG keys > New SSH key

3. Test SSH connection to GitHub
    ssh -T git@github.com
    You should see:
    Hi your_github_username! You've successfully authenticated, but GitHub does not provide shell access.

4. Initialize Git repo locally (in your project folder)

    cd ~/project_linux_modular_makefile
    git init
    git add .
    git commit -m "Initial commit of modular Makefile project"

5. Create a new empty GitHub repository

    Go to https://github.com/new

    Repository name: project_linux_modular_makefile

    Do not initialize with README or any files

    Create repo

6. Add GitHub remote

    git remote add origin git@github.com:your_username/project_linux_modular_makefile.git
    git remote -v  # Verify remote URL


7. Push local branch to GitHub

    Your local branch is likely master by default.

    git push -u origin master 

8. Check branches on GitHub

    GitHub default branch might be main (empty)

    Your files are in master branch locally and remotely

9. Merge master into main branch locally

    Fetch latest changes:

    git fetch origin

    Switch to main branch:
    git checkout main
    # If 'main' does not exist locally:
    # git checkout -b main origin/main
    
10. Push merged main branch to GitHub
    git push origin main

11. Add .gitignore

    Create .gitignore file to avoid committing build files:
    echo -e "*.o\n*.d\nmy_project\ntest/test_main\n.vscode/" > .gitignore
    git add .gitignore
    git commit -m "Add .gitignore"
    git push

12. To check which Git branch you’re currently on, just run:
    git branch

    master
    * working   : Here, working is your current branch.
    feature-x

*****************Git commands for project level****************
git init (To initialize an empty git repository)

ls -a (list out all folder in the directory)

tree

mkdir <dir-name> (To create a new directory)

cat <file-name> (Read the content of the file and print in stdout)

touch <file-name> (To create an empty file)
from git bash
$ echo $USER
$ echo $HOME
$ WHOAMI

from cmd
 set
To see environmental variables:
rundll32.exe sysdm.cpl,EditEnvironmentVariables

git checkout develop/M51.00a_V1 (To checkout feature branch)

git status(show the changes done locally)

git add path (It will add that path)

git submodule update --init --recursive (Clone all the submodules of the repo from Github server)
develop-ha22_sop2_r70--nightly-bld [adcu_proj_ha22 » _admin] [Jenkins] (conti.de)=>Sop2 Ha22

git clone git@github-am.geo.conti.de:ADAS/adcu_proj_ha22.git (Clone a repository from the github cloud server)

git branch -b feature/ADC420HA33_XXXX

git submodule foreach git clean -xdf
git reset --hard
git submodule update --init --recursive 

git submodule sync
conan remove --locks

How to reset local changes and get a fresh repo:
Step1: $ git checkout thebranch

Step2: $ git reset --hard origin/thebranch

Step3: $ git status

Step4: $ git checkout thebranch
Already on 'thebranch'

$ git clone git@github-am.geo.conti.de:ADAS/adcu_proj_ha22 --branch develop/HA22_SOP2_R70
$ git clone git@github-am.geo.conti.de:ADAS/adcu_proj_ha22 --branch develop/M61.00_V2

git reset --hard develop/M60.00_V2

***chekout at master****
git checkout .
git checkout master
git checkout develop/HA22_SOP2_R70
git branch --set-upstream-to=origin/master=> for git pull at master
git checkout develop/master


How to commit files:
git status
git checkout -b feature/ADC420HA22-16523/Test --> New feature branch 
git status
git add
git commit
git push --set-upstream origin feature/ADC420HA22-16523/UnderVoltage_ExtDiagRoutineRequest_IssueFix --> Push the changes to the master branch (Reviewer approval is required)



git status
git checkout -b feature/ADC420HA22-18103/ImplementDatation_Acquisition_SRDMDataPart2 --> New feature branch 
git status
git add
git commit
git push --set-upstream origin feature/ADC420HA22-18103/ImplementDatation_Acquisition_SRDMDataPart2  --> Push the changes to the master branch (Reviewer approval is required)


git checkout -b feature/ADC420HA33-5832/Implementation_CFFID_Block_AAA1_For_CDW_Variant_02

git push --set-upstream origin feature/ADC420HA33-5832/Implementation_CFFID_Block_AAA1_For_CDW_Variant_02


git checkout -b feature/ADC420HA22-18252/SRDM_TimeSeries_Not_Updated
git push --set-upstream origin feature/ADC420HA22-18252/SRDM_TimeSeries_Not_Updated

git checkout -b feature/ADC420HA33-5827/Generic_Periodicity_EDR
git push --set-upstream origin feature/ADC420HA33-5827/Generic_Periodicity_EDR
https://github-am.geo.conti.de/ADAS/adcu_event_data_recorder/pull/217



https://github-am.geo.conti.de/ADAS/adcu_event_data_recorder/tree/master


feature/ADC420HA33-5520/MesPartialStorageOfEvents_OnIgnitionOff


To get your master branch updated with all committed changes on working, first push your commits on working:
    git add ../Git_steps.txt
    git commit -m "Update Git_steps.txt"
    git push origin working


Then switch to master and merge working:
    git checkout master
    git pull origin master      # make sure master is up-to-date
    git merge working
    git push origin master